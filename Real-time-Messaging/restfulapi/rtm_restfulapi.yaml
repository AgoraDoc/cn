openapi: 3.0.0
info:

  description: >
    实时消息 RESTful API 目前支持以下两种功能：

    - 厂商事件查询：查询用户事件和频道事件。

    - 点对点或频道历史消息查询。
  
      <div class="info-msg">
        <i class="fa fa-info-circle"></i><ul><li>厂商事件查询 RESTful API 的 qps 限制为：单厂商（App ID）每秒 10 次。</i><li>当前版本的 RESTful API 仅支持文本历史消息查询，不支持自定义二进制消息。</i><li>查询历史消息 RESTful API 的 qps 限制为：单厂商（App ID）每秒 100 次。</i></ul>
      </div>
    
    ## 认证

    实时消息 RESTful API 仅支持 HTTPS 协议。你可以通过以下任意一种认证方式：

    <li><a href="#basicauth">Basic Authentication</a></li>
    <li><a href="#tokenauth">Token Authentication</a></li>

    ### <a name="basicauth"></a>Basic Authentication
    
    发送请求时，你需要提供 `api_key:api_secret` 通过 Basic HTTP 认证并填入 HTTP 请求头部的 `Authorization` 字段：

    - `api_key`: Customer ID
    
    - `api_secret`: Customer Certificate

    你可以在控制台的 [RESTful API](https://console.agora.io/restful?_ga=2.175816613.605592384.1576459020-1595988498.1574647397) 页面找到你的 Customer ID 和 Customer Certificate。具体生成
    Authorization 字段的方法请参考 [RESTful API 认证](https://docs.agora.io/cn/faq/restful_authentication)。

    ### <a name="tokenauth"></a>Token Authentication

    如果你已经在服务端生成了 RTM Token，你也可以选用 Token Authentication 认证。你需要再发送 HTTP 请求时在 HTTP 请求头部的 x-agora-token 字段和 x-agora-uid 字段分别填入：

    - 服务端生成的 RTM Token。 

    - 生成 RTM Token 时使用的 uid。

    **示例代码**

    ```java
      Request request = new Request.Builder()
      ...
      // 在 HTTP 请求头部的 x-agora-token 字段填入获取的 RTM Token
      .addHeader("x-agora-token", "<Your RTM Token>")
      // 在 HTTP 请求头部的 x-agora-uid 字段填入用于生成该 RTM Token 的 uid
      .addHeader("x-agora-uid", "<Your uid used to generate the RTM Token>")
      ...

      <div class="info-msg">
        <i class="fa fa-info-circle"></i> 关于如何生成 RTM Token，详见<a href="https://docs.agora.io/cn/Real-time-Messaging/rtm_token?platform=All%20Platforms">校验用户权限</a>
      </div>
    
    ## 数据格式

    所有的请求都发送给域名：`api.agora.io`。

    - 请求：请求的格式详见下面各个 API 中的示例。
    
    - 响应：响应内容的格式为 JSON。
      
    <div class="info-msg">
        <i class="fa fa-info-circle"></i>关于如何生成 RTM Token，详见 [校验用户权限](https://docs.agora.io/cn/Real-time-Messaging/rtm_token?platform=All%20Platforms)。
    </div>

    ## API 调用步骤

    ### 厂商事件查询的 API 调用步骤

    - 查询用户上下线事件：直接调用 `user_events` 方法。

    - 查询用户上下线事件：直接调用 `channel_events` 方法。

    ### 历史消息查询的 API 调用步骤

    以下是进行历史消息查询的一般步骤：

    1. 通过 `query` 请求获取 handle 资源。

    2. 调用 `get` 方法查询历史消息。

      <div class="info-msg">
        <i class="fa fa-info-circle"></i>获取 handle 之后的一段时间内，都可以调用 `get` 方法去获取这个 handle 的提供的历史消息。由于后台需要一定准备时间， `get` 方法可能会失败。如果这种情况出现，你可以稍等片刻再次调用 `get` 方法。
      </div>

    ## 响应状态码

    下表列出实时消息 RESTful API 常见 HTTP 响应状态码：
    

      | 状态码 | 描述                                           |
      | :----- | :------------------------------------------- |
      | 200    | 请求成功。    |
      | 400    | 请求的语法错误（如参数错误）。请根据返回提示检查。    |
      | 408    | <li>厂商事件查询：服务器请求超时或服务器无响应，建议稍后重试。</li><li>历史消息查询：成功请求并创建了新的资源。</li>  |
      | 410    | 资源已经失效，请重新调用 POST 方法创建新的查询资源。                     |


  version: Beta
  title: 实时消息 RESTful API
servers: 
  - url: https://api.agora.io
    description: Official Environment
tags: 
- name: "实时消息"

paths:
  /dev/v2/project/{appid}/rtm/vendor/user_events:
    get:
      tags:
      - "实时消息-厂商事件"
      summary: 获取用户上下线事件
      operationId: user_events   
      description: 该方法从 Agora RTM 服务器指定的地址获取用户上下线事件。

          <div class="warning-msg">
            <i class="fa fa-warning"></i>
          <li>RTM 后台最多存储 2000 条事件。</li>
          <li>单次返回最多 1000 条事件。</li>
          <li>我们对事件按区域缓存，因此不保证来自不同区域的事件的事件顺序的正确性。</li>
          <li>我们只在同一区域内同步事件，不在区域间同步。所以，你从某区域拉取了事件后，如果你从另一个区域再次拉取仍然会得到相同的事件。</li>
          </div>

      parameters:
        - $ref: '#/components/parameters/appid'
      responses:
        '200':
          description: 成功从 Agora RTM 服务器指定的地址获取用户上下线事件。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_event_response'
              example:
                result: success
                request_id: 10116762670167749259
                events: { user_id: "rtmtest_RTM_4852_4857w7%", type: "Login", ts: "1578027420761" }

  /dev/v2/project/{appid}/rtm/vendor/channel_events:
    get:
      tags:
      - "实时消息-厂商事件"
      summary: 获取频道登入登出事件 API
      operationId: channel_events
      description: 该方法从 Agora RTM 服务器指定的地址获取获取频道登入登出事件。
      
          <div class="warning-msg">
            <i class="fa fa-warning"></i>
            <li>RTM 后台最多存储 2000 条事件。</li>
            <li>单次返回最多 1000 条事件。</li>
            <li>我们对事件按区域缓存，因此不保证来自不同区域的事件的事件顺序的正确性。</li>
            <li>我们只在同一区域内同步事件，不在区域间同步。所以，你从某区域拉取了事件后，如果你从另一个区域再次拉取仍然会得到相同的事件。</li>
          </div> 
        
      parameters:
        - $ref: '#/components/parameters/appid'
      responses:
        '200':
          description: 成功获取频道登入登出事件。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_event_response'
              example:
                result: success
                request_id: 10116762670167749259
                events: { channel_id: "example_channel_id", user_id: "rtmtest_RTM_4852_4857w7%", type: "Join", ts: "1578027418981" }
                offset: 100
                limit: 20
                order: 
  
  /dev/v2/project/{appid}/rtm/message/history/query:
    post:
      tags:
      - "实时消息-历史消息"
      summary: 创建历史消息查询资源
      operationId: query
      description: 该方法向 Agora RTM 服务器申请历史消息查询资源。若请求成功，你可以通过 GET 方法从服务器返回的 location 获取查询到的历史消息。

      parameters:
        - $ref: '#/components/parameters/appid'
      requestBody:
        $ref: '#/components/requestBodies/message_history'  
        example:
          filter: { source: "src_account", description: "dst_account", start_time: "2019-08-01T01:22:10Z", end_time: "2019-08-01T01:32:10Z" } 
          offset: 100
          limit: 20
          order: asc    
      responses:
        '200':
          description: 操作成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message_history_query_response'
              example:
                result: success
                offset: 100
                order: asc
                location: ~/rtm/message/history/query/123456123456

  /dev/v2/project/{appid}/rtm/message/history/query/{handle}:
    get:
      tags:
      - "实时消息-历史消息"
      summary: 获取历史消息
      operationId: get
      description: 该方法从历史消息 `query`方法返回的历史消息资源获取历史消息


         <div class="info-msg"><i class="fa fa-info-circle"> 每个 APP ID 的请求数限制为每秒钟 10 次。</i></div> 

      parameters:
        - $ref: '#/components/parameters/appid'
        - $ref: '#/components/parameters/handle'
      responses:
        '200':
          description: 操作成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_response'
              example:
                result: success
                code: ok 
                message: 
                  - src: src
                    dst: dst
                    payload: 123
                    ts: 123
                  - src: src
                    dst: dst
                    payload: 12354
                    ts: 155

  /dev/v2/project/{appid}/rtm/message/history/count:
    get:
      tags:
      - "实时消息-历史消息"
      summary: 获取历史消息数目
      operationId: count
      description: 获取历史消息数目
      parameters:
        - $ref: '#/components/parameters/appid'
      requestBody:
        $ref: '#/components/requestBodies/count'
      responses:
        '200':
          description: 操作成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/count_response'
              example:
                result: success
                code: ok
                count: 123
components:
  schemas:
    message_history_query_response:
      type: object
      properties:
        result:
          type: string
          description: 请求结果。
        offset:
          type: integer
          description: 当前时间段内的消息偏移量。
        limit:
          type: integer
          description: 单页历史消息条数。
        location:
          type: string
          description: 历史消息资源地址。你可以从这个 URL 调用 GET 方法 获取查询结果。
        
    message_history:
      type: object
      required:
        - filter
        - offset
        - limit
        - order
      properties:
        filter:
          type: object
          description: >-
            筛选条件

            <div class="info-msg">
              <i class="fa fa-info-circle"></i><sup>1</sup> source 和 destination 的匹配原则详见下表：
            </div>

              | `source` | `destination` | 说明                                          |
              | :------- | :------------ | :-------------------------------------------- |
              | null     | null          | `source` 和 `destination` 不得同时为空。        |
              | null     | UserA         | UserA 在指定时间内收到的所有消息。                |
              | null     | ChannelA      | ChannelA 在指定时间段内收到的所有频道消息。        |
              | UserA    | null          | UserA 在指定时间段内发送的所有消息。               |
              | channelA | 任意字符串      | 返回空值。                                     |
              | UserA    | UserB         | UserA 在指定时间段内发送给 UserB 的所有点对点消息。 |
              | UserA    | ChannelA      | UserA 在指定时间段内发送到 ChannelA 的所有频道消息。|

          properties:
            source:
              type: string
              description: （视情况）消息发送方。<sup>1</sup>
            destination:
              type: string  
              description: （视情况）消息接收方。<sup>1</sup>
            start_time:
              type: string
              description: （必选）历史消息查询起始时间。使用 [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) 标准为 UTC 时间。
            end_time:
              type: string
              description: （必选）历史消息查询结束时间。使用 [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) 标准为 UTC 时间。      
        offset:
          type: integer
          description: 当前时间段内的消息偏移量。
        limit:
          type: integer
          description: 单页历史消息条数。可选值：<ul><li>20</li><li>50</li><li>100</li></ul>  
        order:
          type: string
          description: （可选）排序方法 <ul><li> 按时间顺序（默认）： asc </li><li>按时间倒序： desc </li></ul>
    count:
      type: object
      properties:
        source:
          type: string
          description: （视情况）消息发送方。<sup>1</sup>
        destination:
          type: string  
          description: （视情况）消息接收方。<sup>1</sup>
        start_time:
          type: string
          description: （必选）历史消息查询起始时间。使用 [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) 标准为 UTC 时间。
        end_time:
          type: string
          description: （必选）历史消息查询结束时间。使用 [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) 标准为 UTC 时间。
    count_response:
      type: object
      properties:
        result:
          type: string
          description: 本次请求结果
        code:
          type: string
          description: >-
            资源准备情况：

            - 资源准备完成： "ok"

            - 资源还未准备完成，请稍后重试： "in progress" <sup>2</sup>

            <div class="info-msg">
                <i class="fa fa-info-circle"></i><sup>2</sup> 当服务器返回 "in progress" 时，请间隔 2 秒再发起 count 请求。
            </div> 
        count:
          type: integer
          description: 历史消息数目。 
    get_response:
      type: object
      properties:
        result:
          type: string
          description: 本次请求结果
        code:
          type: string
          description: >-
            资源准备情况：

            - 资源准备完成： "ok"

            - 资源还未准备完成，请稍后重试： "in progress" <sup>2</sup>

            <div class="info-msg">
                <i class="fa fa-info-circle"></i><sup>2</sup> 当服务器返回 "in progress" 时，请间隔 2 秒再发起 count 请求。
            </div> 
        message:
          type: array
          items:
            type: object
            properties:
              src:
                type: string
                description: 消息发送方。
              dst:
                type: string
                description: 消息接收方。
              payload:
                type: string
                description: 消息体。当前版本仅支持文本消息。
              ts:
                type: string
                description: 服务器接收时间。使用 [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) 标准为 UTC 时间。
               
    
    user_event_response:
      type: object
      properties:
        result:
          type: string
          description: >- 
            本次请求结果。

            - "success": 成功；

            - "failure": 失败。

        request_id:
          type: string
          description: 本次请求唯一的 ID。
        events:
          type: object
          description: 用户登录登出事件。
          $ref: '#/components/schemas/user_events'

    user_events:
       type: object
       properties:
         user_id: 
           type: string
           description: 本次事件对应的用户名。
         type: 
           type: string
           description: >-
             事件类型：

             - "Login": 用户登录（上线）事件；

             - "Logout": 用户登出（下线）事件。

         ts: 
           type: integer
           description: 时间戳（ms）。

    channel_event_response:
      type: object
      properties:
        result:
          type: string
          description: >-
            本次请求结果。
              
              - "success": 成功；

              - "failure": 失败。           
        request_id:
          type: string
          description: 本次请求唯一的 ID。
        events:
          type: object
          description: 用户登录登出事件。
          $ref: '#/components/schemas/channel_events'
    channel_events:
      type: object
      properties:
         user_id: 
          type: string
          description: 本次事件对应的用户名。
         type: 
          type: string
          description: >-
            事件类型：

            - "Join": 用户加入频道事件，

            - "Leave": 用户离开频道事件。
         ts: 
           type: integer
           description: 时间戳（ms）。

              

  parameters:
    appid:
      name: appid
      in: path
      required: true
      description: >-
        你的项目使用的 App ID。
      schema:
        type: string

    handle:
      name: handle
      in: path
      required: true
      description: >-
        历史消息查询资源，可以从历史消息 `query` 方法的响应包体的 `location` 字段获取。
      schema:
        type: string


  requestBodies:
    message_history:
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/message_history'          
    count:
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/count'    

  securitySchemes:
    agora_auth:
      type: http
      scheme: basic
